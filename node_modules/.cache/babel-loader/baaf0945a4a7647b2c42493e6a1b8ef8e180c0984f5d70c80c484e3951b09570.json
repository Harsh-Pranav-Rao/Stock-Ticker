{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TickerTape({\n  stockData,\n  darkMode\n}) {\n  _s();\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  const [currentSectorIndex, setCurrentSectorIndex] = useState(0);\n  const [currentSectorData, setCurrentSectorData] = useState([]);\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n    setTickerPosition(screenWidth);\n    const updateTickerPosition = () => {\n      setTickerPosition(prevPosition => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing) ? screenWidth : newPosition;\n      });\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n    updateTickerPosition();\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n\n  // Concatenate data for the same sector to ensure a seamless transition\n  const allSectorData = stockData.reduce((result, item) => {\n    result[item.sector] = [...(result[item.sector] || []), ...Object.entries(item.data)];\n    return result;\n  }, {});\n  const sectors = Object.keys(allSectorData);\n  const nextSectorIndex = (currentSectorIndex + 1) % sectors.length;\n\n  // Initialize the current sector data\n  useEffect(() => {\n    setCurrentSectorData(allSectorData[sectors[currentSectorIndex]]);\n  }, [currentSectorIndex, allSectorData]);\n\n  // Rotate through sectors when the current sector data is empty\n  useEffect(() => {\n    if (currentSectorData.length === 0) {\n      setCurrentSectorIndex(nextSectorIndex);\n    }\n  }, [currentSectorData, nextSectorIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    style: {\n      backgroundColor: darkMode ? 'black' : 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: tickerRef,\n      className: \"ticker\",\n      style: {\n        transform: `translateX(-${tickerPosition}px)`,\n        backgroundColor: darkMode ? 'black' : 'white'\n      },\n      children: currentSectorData.map(([companyName, companyData]) => {\n        const value = ((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"] * 100).toFixed(2);\n        return /*#__PURE__*/_jsxDEV(Company, {\n          name: companyName,\n          value: value,\n          darkMode: darkMode\n        }, companyName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(TickerTape, \"nEn2XuWIV6d7A5wAk5Ji28/ZZX0=\");\n_c = TickerTape;\nexport default TickerTape;\nvar _c;\n$RefreshReg$(_c, \"TickerTape\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Company","jsxDEV","_jsxDEV","TickerTape","stockData","darkMode","_s","tickerRef","tickerPosition","setTickerPosition","tickerWidth","screenWidth","window","innerWidth","itemsPerScreen","Math","floor","itemSpacing","currentSectorIndex","setCurrentSectorIndex","currentSectorData","setCurrentSectorData","ticker","current","animationFrameId","updateTickerPosition","prevPosition","newPosition","requestAnimationFrame","cancelAnimationFrame","allSectorData","reduce","result","item","sector","Object","entries","data","sectors","keys","nextSectorIndex","length","className","style","backgroundColor","children","ref","transform","map","companyName","companyData","value","toFixed","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\n\nfunction TickerTape({ stockData, darkMode }) {\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  const [currentSectorIndex, setCurrentSectorIndex] = useState(0);\n  const [currentSectorData, setCurrentSectorData] = useState([]);\n\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n\n    setTickerPosition(screenWidth);\n\n    const updateTickerPosition = () => {\n      setTickerPosition((prevPosition) => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing)\n          ? screenWidth\n          : newPosition;\n      });\n\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n\n    updateTickerPosition();\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n\n  // Concatenate data for the same sector to ensure a seamless transition\n  const allSectorData = stockData.reduce((result, item) => {\n    result[item.sector] = [...(result[item.sector] || []), ...Object.entries(item.data)];\n    return result;\n  }, {});\n\n  const sectors = Object.keys(allSectorData);\n  const nextSectorIndex = (currentSectorIndex + 1) % sectors.length;\n\n  // Initialize the current sector data\n  useEffect(() => {\n    setCurrentSectorData(allSectorData[sectors[currentSectorIndex]]);\n  }, [currentSectorIndex, allSectorData]);\n\n  // Rotate through sectors when the current sector data is empty\n  useEffect(() => {\n    if (currentSectorData.length === 0) {\n      setCurrentSectorIndex(nextSectorIndex);\n    }\n  }, [currentSectorData, nextSectorIndex]);\n\n  return (\n    <div className=\"ticker-container\" style={{ backgroundColor: darkMode ? 'black' : 'white' }}>\n      <div\n        ref={tickerRef}\n        className=\"ticker\"\n        style={{\n          transform: `translateX(-${tickerPosition}px)`,\n          backgroundColor: darkMode ? 'black' : 'white',\n        }}\n      >\n        {currentSectorData.map(([companyName, companyData]) => {\n          const value = (((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"]) * 100).toFixed(2);\n\n          return (\n            <Company key={companyName} name={companyName} value={value} darkMode={darkMode} />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default TickerTape;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAC;EAAEC,SAAS;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAMa,WAAW,GAAG,GAAG,CAAC,CAAC;EACzB,MAAMC,WAAW,GAAGC,MAAM,CAACC,UAAU;EACrC,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,GAAGD,WAAW,CAAC;EAC5D,MAAMO,WAAW,GAAG,EAAE,CAAC,CAAC;;EAExB,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACuB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAE9DC,SAAS,CAAC,MAAM;IACd,MAAMwB,MAAM,GAAGf,SAAS,CAACgB,OAAO;IAChC,IAAIC,gBAAgB;IAEpBf,iBAAiB,CAACE,WAAW,CAAC;IAE9B,MAAMc,oBAAoB,GAAGA,CAAA,KAAM;MACjChB,iBAAiB,CAAEiB,YAAY,IAAK;QAClC,MAAMC,WAAW,GAAGD,YAAY,GAAG,CAAC;QACpC,OAAOC,WAAW,IAAI,EAAEjB,WAAW,GAAGO,WAAW,CAAC,GAC9CN,WAAW,GACXgB,WAAW;MACjB,CAAC,CAAC;MAEFH,gBAAgB,GAAGI,qBAAqB,CAACH,oBAAoB,CAAC;IAChE,CAAC;IAEDA,oBAAoB,CAAC,CAAC;IAEtB,OAAO,MAAM;MACXI,oBAAoB,CAACL,gBAAgB,CAAC;IACxC,CAAC;EACH,CAAC,EAAE,CAACb,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMmB,aAAa,GAAG1B,SAAS,CAAC2B,MAAM,CAAC,CAACC,MAAM,EAAEC,IAAI,KAAK;IACvDD,MAAM,CAACC,IAAI,CAACC,MAAM,CAAC,GAAG,CAAC,IAAIF,MAAM,CAACC,IAAI,CAACC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,GAAGC,MAAM,CAACC,OAAO,CAACH,IAAI,CAACI,IAAI,CAAC,CAAC;IACpF,OAAOL,MAAM;EACf,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,MAAMM,OAAO,GAAGH,MAAM,CAACI,IAAI,CAACT,aAAa,CAAC;EAC1C,MAAMU,eAAe,GAAG,CAACtB,kBAAkB,GAAG,CAAC,IAAIoB,OAAO,CAACG,MAAM;;EAEjE;EACA3C,SAAS,CAAC,MAAM;IACduB,oBAAoB,CAACS,aAAa,CAACQ,OAAO,CAACpB,kBAAkB,CAAC,CAAC,CAAC;EAClE,CAAC,EAAE,CAACA,kBAAkB,EAAEY,aAAa,CAAC,CAAC;;EAEvC;EACAhC,SAAS,CAAC,MAAM;IACd,IAAIsB,iBAAiB,CAACqB,MAAM,KAAK,CAAC,EAAE;MAClCtB,qBAAqB,CAACqB,eAAe,CAAC;IACxC;EACF,CAAC,EAAE,CAACpB,iBAAiB,EAAEoB,eAAe,CAAC,CAAC;EAExC,oBACEtC,OAAA;IAAKwC,SAAS,EAAC,kBAAkB;IAACC,KAAK,EAAE;MAAEC,eAAe,EAAEvC,QAAQ,GAAG,OAAO,GAAG;IAAQ,CAAE;IAAAwC,QAAA,eACzF3C,OAAA;MACE4C,GAAG,EAAEvC,SAAU;MACfmC,SAAS,EAAC,QAAQ;MAClBC,KAAK,EAAE;QACLI,SAAS,EAAG,eAAcvC,cAAe,KAAI;QAC7CoC,eAAe,EAAEvC,QAAQ,GAAG,OAAO,GAAG;MACxC,CAAE;MAAAwC,QAAA,EAEDzB,iBAAiB,CAAC4B,GAAG,CAAC,CAAC,CAACC,WAAW,EAAEC,WAAW,CAAC,KAAK;QACrD,MAAMC,KAAK,GAAG,CAAE,CAACD,WAAW,CAAC,GAAG,CAAC,GAAGA,WAAW,CAAC,GAAG,CAAC,IAAIA,WAAW,CAAC,GAAG,CAAC,GAAI,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC;QAE3F,oBACElD,OAAA,CAACF,OAAO;UAAmBqD,IAAI,EAAEJ,WAAY;UAACE,KAAK,EAAEA,KAAM;UAAC9C,QAAQ,EAAEA;QAAS,GAAjE4C,WAAW;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAwD,CAAC;MAEtF,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnD,EAAA,CA5EQH,UAAU;AAAAuD,EAAA,GAAVvD,UAAU;AA8EnB,eAAeA,UAAU;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}