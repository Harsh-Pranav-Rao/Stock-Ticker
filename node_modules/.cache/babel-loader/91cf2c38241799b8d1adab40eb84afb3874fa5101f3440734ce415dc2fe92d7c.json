{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TickerTape({\n  stockData,\n  currentSector,\n  darkMode\n}) {\n  _s();\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n    setTickerPosition(screenWidth);\n    const updateTickerPosition = () => {\n      setTickerPosition(prevPosition => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing) ? screenWidth : newPosition;\n      });\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n    updateTickerPosition();\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n\n  // Filter the companies to display based on the current sector\n  const companiesToDisplay = stockData.filter(dataItem => dataItem.sector === currentSector).map(dataItem => Object.entries(dataItem.data).map(([companyName, companyData]) => {\n    const value = ((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"] * 100).toFixed(2);\n    return /*#__PURE__*/_jsxDEV(Company, {\n      name: companyName,\n      value: value,\n      darkMode: darkMode\n    }, companyName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this);\n  })).reduce((acc, val) => acc.concat(val), []); // Flatten the array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    style: {\n      backgroundColor: darkMode ? 'black' : 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: tickerRef,\n      className: \"ticker\",\n      style: {\n        transform: `translateX(-${tickerPosition}px)`,\n        backgroundColor: darkMode ? 'black' : 'white'\n      },\n      children: companiesToDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(TickerTape, \"WwktqLCWstFmRK0SMf9FC5OYpS0=\");\n_c = TickerTape;\nexport default TickerTape;\nvar _c;\n$RefreshReg$(_c, \"TickerTape\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Company","jsxDEV","_jsxDEV","TickerTape","stockData","currentSector","darkMode","_s","tickerRef","tickerPosition","setTickerPosition","tickerWidth","screenWidth","window","innerWidth","itemsPerScreen","Math","floor","itemSpacing","ticker","current","animationFrameId","updateTickerPosition","prevPosition","newPosition","requestAnimationFrame","cancelAnimationFrame","companiesToDisplay","filter","dataItem","sector","map","Object","entries","data","companyName","companyData","value","toFixed","name","fileName","_jsxFileName","lineNumber","columnNumber","reduce","acc","val","concat","className","style","backgroundColor","children","ref","transform","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\n\nfunction TickerTape({ stockData, currentSector, darkMode }) {\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n\n    setTickerPosition(screenWidth);\n\n    const updateTickerPosition = () => {\n      setTickerPosition((prevPosition) => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing)\n          ? screenWidth\n          : newPosition;\n      });\n\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n\n    updateTickerPosition();\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n\n  // Filter the companies to display based on the current sector\n  const companiesToDisplay = stockData\n    .filter((dataItem) => dataItem.sector === currentSector)\n    .map((dataItem) =>\n      Object.entries(dataItem.data).map(([companyName, companyData]) => {\n        const value = (((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"]) * 100).toFixed(2);\n\n        return (\n          <Company key={companyName} name={companyName} value={value} darkMode={darkMode} />\n        );\n      })\n    )\n    .reduce((acc, val) => acc.concat(val), []); // Flatten the array\n\n  return (\n    <div className=\"ticker-container\" style={{ backgroundColor: darkMode ? 'black' : 'white' }}>\n      <div\n        ref={tickerRef}\n        className=\"ticker\"\n        style={{\n          transform: `translateX(-${tickerPosition}px)`,\n          backgroundColor: darkMode ? 'black' : 'white',\n        }}\n      >\n        {companiesToDisplay}\n      </div>\n    </div>\n  );\n}\n\nexport default TickerTape;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAC;EAAEC,SAAS;EAAEC,aAAa;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC1D,MAAMC,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAMc,WAAW,GAAG,GAAG,CAAC,CAAC;EACzB,MAAMC,WAAW,GAAGC,MAAM,CAACC,UAAU;EACrC,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,GAAGD,WAAW,CAAC;EAC5D,MAAMO,WAAW,GAAG,EAAE,CAAC,CAAC;;EAExBpB,SAAS,CAAC,MAAM;IACd,MAAMqB,MAAM,GAAGX,SAAS,CAACY,OAAO;IAChC,IAAIC,gBAAgB;IAEpBX,iBAAiB,CAACE,WAAW,CAAC;IAE9B,MAAMU,oBAAoB,GAAGA,CAAA,KAAM;MACjCZ,iBAAiB,CAAEa,YAAY,IAAK;QAClC,MAAMC,WAAW,GAAGD,YAAY,GAAG,CAAC;QACpC,OAAOC,WAAW,IAAI,EAAEb,WAAW,GAAGO,WAAW,CAAC,GAC9CN,WAAW,GACXY,WAAW;MACjB,CAAC,CAAC;MAEFH,gBAAgB,GAAGI,qBAAqB,CAACH,oBAAoB,CAAC;IAChE,CAAC;IAEDA,oBAAoB,CAAC,CAAC;IAEtB,OAAO,MAAM;MACXI,oBAAoB,CAACL,gBAAgB,CAAC;IACxC,CAAC;EACH,CAAC,EAAE,CAACT,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMe,kBAAkB,GAAGvB,SAAS,CACjCwB,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,MAAM,KAAKzB,aAAa,CAAC,CACvD0B,GAAG,CAAEF,QAAQ,IACZG,MAAM,CAACC,OAAO,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAACH,GAAG,CAAC,CAAC,CAACI,WAAW,EAAEC,WAAW,CAAC,KAAK;IAChE,MAAMC,KAAK,GAAG,CAAE,CAACD,WAAW,CAAC,GAAG,CAAC,GAAGA,WAAW,CAAC,GAAG,CAAC,IAAIA,WAAW,CAAC,GAAG,CAAC,GAAI,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC;IAE3F,oBACEpC,OAAA,CAACF,OAAO;MAAmBuC,IAAI,EAAEJ,WAAY;MAACE,KAAK,EAAEA,KAAM;MAAC/B,QAAQ,EAAEA;IAAS,GAAjE6B,WAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAwD,CAAC;EAEtF,CAAC,CACH,CAAC,CACAC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,CAACE,MAAM,CAACD,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAE9C,oBACE5C,OAAA;IAAK8C,SAAS,EAAC,kBAAkB;IAACC,KAAK,EAAE;MAAEC,eAAe,EAAE5C,QAAQ,GAAG,OAAO,GAAG;IAAQ,CAAE;IAAA6C,QAAA,eACzFjD,OAAA;MACEkD,GAAG,EAAE5C,SAAU;MACfwC,SAAS,EAAC,QAAQ;MAClBC,KAAK,EAAE;QACLI,SAAS,EAAG,eAAc5C,cAAe,KAAI;QAC7CyC,eAAe,EAAE5C,QAAQ,GAAG,OAAO,GAAG;MACxC,CAAE;MAAA6C,QAAA,EAEDxB;IAAkB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpC,EAAA,CA5DQJ,UAAU;AAAAmD,EAAA,GAAVnD,UAAU;AA8DnB,eAAeA,UAAU;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}