{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TickerTape({\n  stockData,\n  darkMode\n}) {\n  _s();\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n  const transitionThreshold = itemsPerScreen; // The number of items displayed before transitioning\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n  const currentSectorData = stockData.find(data => data.sector === currentSector);\n  const currentSectorCompanies = currentSectorData ? Object.keys(currentSectorData.data) : [];\n  const [displayedCompanyCount, setDisplayedCompanyCount] = useState(0);\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n    setTickerPosition(screenWidth);\n    const updateTickerPosition = () => {\n      setTickerPosition(prevPosition => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing) ? screenWidth : newPosition;\n      });\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n    updateTickerPosition();\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n  useEffect(() => {\n    // Reset the displayed company count when the sector changes\n    setDisplayedCompanyCount(0);\n  }, [currentSector]);\n  useEffect(() => {\n    // Update the displayed company count when the ticker moves\n    if (tickerPosition <= -(tickerWidth + itemSpacing)) {\n      setDisplayedCompanyCount(prevCount => prevCount + 1);\n      if (displayedCompanyCount >= transitionThreshold) {\n        // Transition to the next sector when the threshold is reached\n        const sectors = stockData.map(dataItem => dataItem.sector);\n        const currentSectorIndex = sectors.indexOf(currentSector);\n        const nextSectorIndex = (currentSectorIndex + 1) % sectors.length;\n        const nextSector = sectors[nextSectorIndex];\n\n        // Handle the sector transition as you like, for example, by setting the current sector state\n        setCurrentSector(nextSector);\n      }\n    }\n  }, [tickerPosition, currentSector, displayedCompanyCount, transitionThreshold]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    style: {\n      backgroundColor: darkMode ? 'black' : 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: tickerRef,\n      className: \"ticker\",\n      style: {\n        transform: `translateX(-${tickerPosition}px)`,\n        backgroundColor: darkMode ? 'black' : 'white'\n      },\n      children: stockData.map(dataItem => {\n        if (dataItem.sector === currentSector) {\n          return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n            const value = ((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"] * 100).toFixed(2);\n            return /*#__PURE__*/_jsxDEV(Company, {\n              name: companyName,\n              value: value,\n              darkMode: darkMode\n            }, companyName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this);\n          });\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(TickerTape, \"DhWpASovNPU1WCDJl/a0ovzNUOw=\");\n_c = TickerTape;\nexport default TickerTape;\nvar _c;\n$RefreshReg$(_c, \"TickerTape\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Company","jsxDEV","_jsxDEV","TickerTape","stockData","darkMode","_s","tickerRef","tickerPosition","setTickerPosition","tickerWidth","screenWidth","window","innerWidth","itemsPerScreen","Math","floor","itemSpacing","transitionThreshold","currentSector","length","sector","currentSectorData","find","data","currentSectorCompanies","Object","keys","displayedCompanyCount","setDisplayedCompanyCount","ticker","current","animationFrameId","updateTickerPosition","prevPosition","newPosition","requestAnimationFrame","cancelAnimationFrame","prevCount","sectors","map","dataItem","currentSectorIndex","indexOf","nextSectorIndex","nextSector","setCurrentSector","className","style","backgroundColor","children","ref","transform","entries","companyName","companyData","value","toFixed","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\n\nfunction TickerTape({ stockData, darkMode }) {\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n  const transitionThreshold = itemsPerScreen; // The number of items displayed before transitioning\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n\n  const currentSectorData = stockData.find((data) => data.sector === currentSector);\n  const currentSectorCompanies = currentSectorData ? Object.keys(currentSectorData.data) : [];\n  const [displayedCompanyCount, setDisplayedCompanyCount] = useState(0);\n\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n\n    setTickerPosition(screenWidth);\n\n    const updateTickerPosition = () => {\n      setTickerPosition((prevPosition) => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing)\n          ? screenWidth\n          : newPosition;\n      });\n\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n\n    updateTickerPosition();\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n\n  useEffect(() => {\n    // Reset the displayed company count when the sector changes\n    setDisplayedCompanyCount(0);\n  }, [currentSector]);\n\n  useEffect(() => {\n    // Update the displayed company count when the ticker moves\n    if (tickerPosition <= -(tickerWidth + itemSpacing)) {\n      setDisplayedCompanyCount((prevCount) => prevCount + 1);\n\n      if (displayedCompanyCount >= transitionThreshold) {\n        // Transition to the next sector when the threshold is reached\n        const sectors = stockData.map((dataItem) => dataItem.sector);\n        const currentSectorIndex = sectors.indexOf(currentSector);\n        const nextSectorIndex = (currentSectorIndex + 1) % sectors.length;\n        const nextSector = sectors[nextSectorIndex];\n\n        // Handle the sector transition as you like, for example, by setting the current sector state\n        setCurrentSector(nextSector);\n      }\n    }\n  }, [tickerPosition, currentSector, displayedCompanyCount, transitionThreshold]);\n\n  return (\n    <div className=\"ticker-container\" style={{ backgroundColor: darkMode ? 'black' : 'white' }}>\n      <div\n        ref={tickerRef}\n        className=\"ticker\"\n        style={{\n          transform: `translateX(-${tickerPosition}px)`,\n          backgroundColor: darkMode ? 'black' : 'white',\n        }}\n      >\n        {stockData.map((dataItem) => {\n          if (dataItem.sector === currentSector) {\n            return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n              const value = (((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"]) * 100).toFixed(2);\n\n              return (\n                <Company key={companyName} name={companyName} value={value} darkMode={darkMode} />\n              );\n            });\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default TickerTape;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}