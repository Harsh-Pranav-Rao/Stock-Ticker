{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TickerTape({\n  stockData,\n  darkMode\n}) {\n  _s();\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemSpacing = 10; // Adjust the spacing between items\n  const itemsPerScreen = Math.floor(screenWidth / (tickerWidth + itemSpacing));\n  const companiesPerSector = {};\n  let currentCompanyIndex = 0;\n  let currentSector = '';\n\n  // Organize companies by sector and count\n  stockData.forEach(dataItem => {\n    if (!companiesPerSector[dataItem.sector]) {\n      companiesPerSector[dataItem.sector] = Object.keys(dataItem.data);\n    }\n  });\n\n  // Use an effect to update the ticker position when the data changes\n  useEffect(() => {\n    if (currentSector === '') {\n      currentSector = stockData[stockData.length - 1].sector;\n    }\n    const currentCompanies = companiesPerSector[currentSector];\n    const totalCompanies = currentCompanies.length;\n\n    // Calculate the remaining distance based on the total ticker width and the ticker's position\n    const remainingDistance = totalCompanies * (tickerWidth + itemSpacing) - tickerPosition;\n\n    // Increment the ticker position\n    setTickerPosition(tickerPosition + 1);\n\n    // If the ticker goes beyond the remaining distance, reset the ticker position\n    if (tickerPosition >= remainingDistance) {\n      setTickerPosition(0);\n      currentCompanyIndex = (currentCompanyIndex + 1) % totalCompanies;\n\n      // Change to the next sector if all companies are displayed\n      if (currentCompanyIndex === 0) {\n        const sectorIndex = stockData.findIndex(dataItem => dataItem.sector === currentSector);\n        currentSector = stockData[(sectorIndex + 1) % stockData.length].sector;\n      }\n    }\n  }, [stockData, currentSector, tickerPosition, tickerWidth, itemSpacing]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    style: {\n      backgroundColor: darkMode ? 'black' : 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: tickerRef,\n      className: \"ticker\",\n      style: {\n        transform: `translateX(-${tickerPosition}px)`,\n        backgroundColor: darkMode ? 'black' : 'white'\n      },\n      children: stockData.map(dataItem => {\n        if (dataItem.sector === currentSector) {\n          return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n            const value = ((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"] * 100).toFixed(2);\n            return /*#__PURE__*/_jsxDEV(Company, {\n              name: companyName,\n              value: value,\n              darkMode: darkMode\n            }, companyName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this);\n          });\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(TickerTape, \"WwktqLCWstFmRK0SMf9FC5OYpS0=\");\n_c = TickerTape;\nexport default TickerTape;\nvar _c;\n$RefreshReg$(_c, \"TickerTape\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Company","jsxDEV","_jsxDEV","TickerTape","stockData","darkMode","_s","tickerRef","tickerPosition","setTickerPosition","tickerWidth","screenWidth","window","innerWidth","itemSpacing","itemsPerScreen","Math","floor","companiesPerSector","currentCompanyIndex","currentSector","forEach","dataItem","sector","Object","keys","data","length","currentCompanies","totalCompanies","remainingDistance","sectorIndex","findIndex","className","style","backgroundColor","children","ref","transform","map","entries","companyName","companyData","value","toFixed","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\n\nfunction TickerTape({ stockData, darkMode }) {\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemSpacing = 10; // Adjust the spacing between items\n  const itemsPerScreen = Math.floor(screenWidth / (tickerWidth + itemSpacing));\n  const companiesPerSector = {};\n  let currentCompanyIndex = 0;\n  let currentSector = '';\n\n  // Organize companies by sector and count\n  stockData.forEach((dataItem) => {\n    if (!companiesPerSector[dataItem.sector]) {\n      companiesPerSector[dataItem.sector] = Object.keys(dataItem.data);\n    }\n  });\n\n  // Use an effect to update the ticker position when the data changes\n  useEffect(() => {\n    if (currentSector === '') {\n      currentSector = stockData[stockData.length - 1].sector;\n    }\n\n    const currentCompanies = companiesPerSector[currentSector];\n    const totalCompanies = currentCompanies.length;\n\n    // Calculate the remaining distance based on the total ticker width and the ticker's position\n    const remainingDistance = totalCompanies * (tickerWidth + itemSpacing) - tickerPosition;\n\n    // Increment the ticker position\n    setTickerPosition(tickerPosition + 1);\n\n    // If the ticker goes beyond the remaining distance, reset the ticker position\n    if (tickerPosition >= remainingDistance) {\n      setTickerPosition(0);\n      currentCompanyIndex = (currentCompanyIndex + 1) % totalCompanies;\n\n      // Change to the next sector if all companies are displayed\n      if (currentCompanyIndex === 0) {\n        const sectorIndex = stockData.findIndex((dataItem) => dataItem.sector === currentSector);\n        currentSector = stockData[(sectorIndex + 1) % stockData.length].sector;\n      }\n    }\n  }, [stockData, currentSector, tickerPosition, tickerWidth, itemSpacing]);\n\n  return (\n    <div className=\"ticker-container\" style={{ backgroundColor: darkMode ? 'black' : 'white' }}>\n      <div\n        ref={tickerRef}\n        className=\"ticker\"\n        style={{\n          transform: `translateX(-${tickerPosition}px)`,\n          backgroundColor: darkMode ? 'black' : 'white',\n        }}\n      >\n        {stockData.map((dataItem) => {\n          if (dataItem.sector === currentSector) {\n            return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n              const value = (((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"]) * 100).toFixed(2);\n\n              return (\n                <Company key={companyName} name={companyName} value={value} darkMode={darkMode} />\n              );\n            });\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default TickerTape;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAC;EAAEC,SAAS;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAMa,WAAW,GAAG,GAAG,CAAC,CAAC;EACzB,MAAMC,WAAW,GAAGC,MAAM,CAACC,UAAU;EACrC,MAAMC,WAAW,GAAG,EAAE,CAAC,CAAC;EACxB,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACN,WAAW,IAAID,WAAW,GAAGI,WAAW,CAAC,CAAC;EAC5E,MAAMI,kBAAkB,GAAG,CAAC,CAAC;EAC7B,IAAIC,mBAAmB,GAAG,CAAC;EAC3B,IAAIC,aAAa,GAAG,EAAE;;EAEtB;EACAhB,SAAS,CAACiB,OAAO,CAAEC,QAAQ,IAAK;IAC9B,IAAI,CAACJ,kBAAkB,CAACI,QAAQ,CAACC,MAAM,CAAC,EAAE;MACxCL,kBAAkB,CAACI,QAAQ,CAACC,MAAM,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAACI,IAAI,CAAC;IAClE;EACF,CAAC,CAAC;;EAEF;EACA5B,SAAS,CAAC,MAAM;IACd,IAAIsB,aAAa,KAAK,EAAE,EAAE;MACxBA,aAAa,GAAGhB,SAAS,CAACA,SAAS,CAACuB,MAAM,GAAG,CAAC,CAAC,CAACJ,MAAM;IACxD;IAEA,MAAMK,gBAAgB,GAAGV,kBAAkB,CAACE,aAAa,CAAC;IAC1D,MAAMS,cAAc,GAAGD,gBAAgB,CAACD,MAAM;;IAE9C;IACA,MAAMG,iBAAiB,GAAGD,cAAc,IAAInB,WAAW,GAAGI,WAAW,CAAC,GAAGN,cAAc;;IAEvF;IACAC,iBAAiB,CAACD,cAAc,GAAG,CAAC,CAAC;;IAErC;IACA,IAAIA,cAAc,IAAIsB,iBAAiB,EAAE;MACvCrB,iBAAiB,CAAC,CAAC,CAAC;MACpBU,mBAAmB,GAAG,CAACA,mBAAmB,GAAG,CAAC,IAAIU,cAAc;;MAEhE;MACA,IAAIV,mBAAmB,KAAK,CAAC,EAAE;QAC7B,MAAMY,WAAW,GAAG3B,SAAS,CAAC4B,SAAS,CAAEV,QAAQ,IAAKA,QAAQ,CAACC,MAAM,KAAKH,aAAa,CAAC;QACxFA,aAAa,GAAGhB,SAAS,CAAC,CAAC2B,WAAW,GAAG,CAAC,IAAI3B,SAAS,CAACuB,MAAM,CAAC,CAACJ,MAAM;MACxE;IACF;EACF,CAAC,EAAE,CAACnB,SAAS,EAAEgB,aAAa,EAAEZ,cAAc,EAAEE,WAAW,EAAEI,WAAW,CAAC,CAAC;EAExE,oBACEZ,OAAA;IAAK+B,SAAS,EAAC,kBAAkB;IAACC,KAAK,EAAE;MAAEC,eAAe,EAAE9B,QAAQ,GAAG,OAAO,GAAG;IAAQ,CAAE;IAAA+B,QAAA,eACzFlC,OAAA;MACEmC,GAAG,EAAE9B,SAAU;MACf0B,SAAS,EAAC,QAAQ;MAClBC,KAAK,EAAE;QACLI,SAAS,EAAG,eAAc9B,cAAe,KAAI;QAC7C2B,eAAe,EAAE9B,QAAQ,GAAG,OAAO,GAAG;MACxC,CAAE;MAAA+B,QAAA,EAEDhC,SAAS,CAACmC,GAAG,CAAEjB,QAAQ,IAAK;QAC3B,IAAIA,QAAQ,CAACC,MAAM,KAAKH,aAAa,EAAE;UACrC,OAAOI,MAAM,CAACgB,OAAO,CAAClB,QAAQ,CAACI,IAAI,CAAC,CAACa,GAAG,CAAC,CAAC,CAACE,WAAW,EAAEC,WAAW,CAAC,KAAK;YACvE,MAAMC,KAAK,GAAG,CAAE,CAACD,WAAW,CAAC,GAAG,CAAC,GAAGA,WAAW,CAAC,GAAG,CAAC,IAAIA,WAAW,CAAC,GAAG,CAAC,GAAI,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC;YAE3F,oBACE1C,OAAA,CAACF,OAAO;cAAmB6C,IAAI,EAAEJ,WAAY;cAACE,KAAK,EAAEA,KAAM;cAACtC,QAAQ,EAAEA;YAAS,GAAjEoC,WAAW;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAwD,CAAC;UAEtF,CAAC,CAAC;QACJ;QACA,OAAO,IAAI;MACb,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC3C,EAAA,CAvEQH,UAAU;AAAA+C,EAAA,GAAV/C,UAAU;AAyEnB,eAAeA,UAAU;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}