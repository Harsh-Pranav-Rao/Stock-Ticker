{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TickerTape({\n  stockData,\n  darkMode\n}) {\n  _s();\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n\n  // Use an effect to update the ticker position when the data changes\n  useEffect(() => {\n    const currentSectorData = stockData.find(data => data.sector === currentSector);\n    if (!currentSectorData) return;\n    const companiesInSector = Object.keys(currentSectorData.data);\n    const totalCompanies = companiesInSector.length;\n    const totalTickerWidth = totalCompanies * (tickerWidth + itemSpacing);\n\n    // Calculate the remaining distance based on the total ticker width and the ticker's position\n    const remainingDistance = totalTickerWidth - tickerPosition;\n\n    // Calculate the animation duration based on the remaining distance and screen width\n    const animationDuration = remainingDistance / screenWidth * 60 * 1000; // 60 frames per second\n\n    // Update the ticker position and animation duration\n    setTickerPosition(remainingDistance);\n    tickerRef.current.style.animation = `ticker-slide ${animationDuration}ms linear forwards`;\n\n    // Remove the animation class when the animation finishes\n    const onAnimationEnd = () => {\n      tickerRef.current.style.animation = 'none';\n      tickerRef.current.removeEventListener('animationiteration', onAnimationEnd);\n    };\n    tickerRef.current.addEventListener('animationiteration', onAnimationEnd);\n  }, [stockData, currentSector, tickerWidth, itemSpacing, screenWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    style: {\n      backgroundColor: darkMode ? 'black' : 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: tickerRef,\n      className: \"ticker\",\n      style: {\n        transform: `translateX(-${tickerPosition}px)`,\n        backgroundColor: darkMode ? 'black' : 'white'\n      },\n      children: stockData.map(dataItem => {\n        if (dataItem.sector === currentSector) {\n          return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n            const value = ((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"] * 100).toFixed(2);\n            return /*#__PURE__*/_jsxDEV(Company, {\n              name: companyName,\n              value: value,\n              darkMode: darkMode\n            }, companyName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this);\n          });\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(TickerTape, \"WwktqLCWstFmRK0SMf9FC5OYpS0=\");\n_c = TickerTape;\nexport default TickerTape;\nvar _c;\n$RefreshReg$(_c, \"TickerTape\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Company","jsxDEV","_jsxDEV","TickerTape","stockData","darkMode","_s","tickerRef","tickerPosition","setTickerPosition","tickerWidth","screenWidth","window","innerWidth","itemSpacing","currentSector","length","sector","currentSectorData","find","data","companiesInSector","Object","keys","totalCompanies","totalTickerWidth","remainingDistance","animationDuration","current","style","animation","onAnimationEnd","removeEventListener","addEventListener","className","backgroundColor","children","ref","transform","map","dataItem","entries","companyName","companyData","value","toFixed","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\n\nfunction TickerTape({ stockData, darkMode }) {\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n\n  // Use an effect to update the ticker position when the data changes\n  useEffect(() => {\n    const currentSectorData = stockData.find((data) => data.sector === currentSector);\n    if (!currentSectorData) return;\n\n    const companiesInSector = Object.keys(currentSectorData.data);\n    const totalCompanies = companiesInSector.length;\n    const totalTickerWidth = totalCompanies * (tickerWidth + itemSpacing);\n\n    // Calculate the remaining distance based on the total ticker width and the ticker's position\n    const remainingDistance = totalTickerWidth - tickerPosition;\n\n    // Calculate the animation duration based on the remaining distance and screen width\n    const animationDuration = (remainingDistance / screenWidth) * 60 * 1000; // 60 frames per second\n\n    // Update the ticker position and animation duration\n    setTickerPosition(remainingDistance);\n    tickerRef.current.style.animation = `ticker-slide ${animationDuration}ms linear forwards`;\n\n    // Remove the animation class when the animation finishes\n    const onAnimationEnd = () => {\n      tickerRef.current.style.animation = 'none';\n      tickerRef.current.removeEventListener('animationiteration', onAnimationEnd);\n    };\n    tickerRef.current.addEventListener('animationiteration', onAnimationEnd);\n  }, [stockData, currentSector, tickerWidth, itemSpacing, screenWidth]);\n\n  return (\n    <div className=\"ticker-container\" style={{ backgroundColor: darkMode ? 'black' : 'white' }}>\n      <div\n        ref={tickerRef}\n        className=\"ticker\"\n        style={{\n          transform: `translateX(-${tickerPosition}px)`,\n          backgroundColor: darkMode ? 'black' : 'white',\n        }}\n      >\n        {stockData.map((dataItem) => {\n          if (dataItem.sector === currentSector) {\n            return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n              const value = (((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"]) * 100).toFixed(2);\n\n              return (\n                <Company key={companyName} name={companyName} value={value} darkMode={darkMode} />\n              );\n            });\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default TickerTape;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}