{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TickerTape from './components/tickerTape/TickerTape';\nimport './App.css';\nimport sectors from './sectorData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  useEffect(() => {\n    // Create an EventSource object to listen for SSE events\n    const eventSource = new EventSource('/api');\n\n    // Define an event listener to handle incoming SSE events\n    eventSource.onmessage = event => {\n      // Parse the JSON data received in the event\n      const data = JSON.parse(event.data);\n\n      // Update the state with the received data\n      setStockData(data);\n      setIsLoading(false);\n    };\n\n    // Cleanup when the component is unmounted\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n  const bodyStyle = {\n    backgroundColor: darkMode ? 'black' : 'white'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: bodyStyle,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          borderColor: darkMode ? 'white' : 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TickerTape, {\n        stockData: stockData,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          borderColor: darkMode ? 'white' : 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"DMbutton\",\n        onClick: () => {\n          setDarkMode(prev => !prev);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"material-icons\",\n          children: darkMode ? 'wb_sunny' : 'brightness_3'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Uo98I+ESfoya6PeDzZoLsss4TQw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TickerTape","sectors","jsxDEV","_jsxDEV","App","_s","stockData","setStockData","isLoading","setIsLoading","darkMode","setDarkMode","eventSource","EventSource","onmessage","event","data","JSON","parse","close","bodyStyle","backgroundColor","style","children","className","fileName","_jsxFileName","lineNumber","columnNumber","borderColor","onClick","prev","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TickerTape from './components/tickerTape/TickerTape';\nimport './App.css';\nimport sectors from './sectorData';\n\nfunction App() {\n  const [stockData, setStockData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    // Create an EventSource object to listen for SSE events\n    const eventSource = new EventSource('/api');\n\n    // Define an event listener to handle incoming SSE events\n    eventSource.onmessage = (event) => {\n      // Parse the JSON data received in the event\n      const data = JSON.parse(event.data);\n\n      // Update the state with the received data\n      setStockData(data);\n      setIsLoading(false);\n    };\n\n    // Cleanup when the component is unmounted\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n\n  const bodyStyle = {\n    backgroundColor: darkMode ? 'black' : 'white',\n  };\n\n  return (\n    <div style={bodyStyle}>\n      {isLoading ? (\n        <div className=\"loader\"></div>\n      ) : (\n        <div className=\"app-container\">\n          <hr style={{ borderColor: darkMode ? 'white' : 'black' }} />\n          <TickerTape stockData={stockData} darkMode={darkMode} />\n          <hr style={{ borderColor: darkMode ? 'white' : 'black' }} />\n          <button\n            className=\"DMbutton\"\n            onClick={() => {\n              setDarkMode((prev) => !prev);\n            }}\n          >\n            <i className=\"material-icons\">\n              {darkMode ? 'wb_sunny' : 'brightness_3'}\n            </i>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,WAAW,GAAG,IAAIC,WAAW,CAAC,MAAM,CAAC;;IAE3C;IACAD,WAAW,CAACE,SAAS,GAAIC,KAAK,IAAK;MACjC;MACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;;MAEnC;MACAT,YAAY,CAACS,IAAI,CAAC;MAClBP,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC;;IAED;IACA,OAAO,MAAM;MACXG,WAAW,CAACO,KAAK,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,SAAS,GAAG;IAChBC,eAAe,EAAEX,QAAQ,GAAG,OAAO,GAAG;EACxC,CAAC;EAED,oBACEP,OAAA;IAAKmB,KAAK,EAAEF,SAAU;IAAAG,QAAA,EACnBf,SAAS,gBACRL,OAAA;MAAKqB,SAAS,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAE9BzB,OAAA;MAAKqB,SAAS,EAAC,eAAe;MAAAD,QAAA,gBAC5BpB,OAAA;QAAImB,KAAK,EAAE;UAAEO,WAAW,EAAEnB,QAAQ,GAAG,OAAO,GAAG;QAAQ;MAAE;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5DzB,OAAA,CAACH,UAAU;QAACM,SAAS,EAAEA,SAAU;QAACI,QAAQ,EAAEA;MAAS;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxDzB,OAAA;QAAImB,KAAK,EAAE;UAAEO,WAAW,EAAEnB,QAAQ,GAAG,OAAO,GAAG;QAAQ;MAAE;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5DzB,OAAA;QACEqB,SAAS,EAAC,UAAU;QACpBM,OAAO,EAAEA,CAAA,KAAM;UACbnB,WAAW,CAAEoB,IAAI,IAAK,CAACA,IAAI,CAAC;QAC9B,CAAE;QAAAR,QAAA,eAEFpB,OAAA;UAAGqB,SAAS,EAAC,gBAAgB;UAAAD,QAAA,EAC1Bb,QAAQ,GAAG,UAAU,GAAG;QAAc;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACvB,EAAA,CApDQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAsDZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}