{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TickerTape({\n  stockData,\n  darkMode\n}) {\n  _s();\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n\n  // Use an effect to update the ticker position when the data changes\n  useEffect(() => {\n    const currentSectorData = stockData.find(data => data.sector === currentSector);\n    if (!currentSectorData) return;\n    const companiesInSector = Object.keys(currentSectorData.data);\n    const totalCompanies = companiesInSector.length;\n    const totalTickerWidth = totalCompanies * (tickerWidth + itemSpacing);\n\n    // Calculate the remaining distance based on the total ticker width and the ticker's position\n    const remainingDistance = totalTickerWidth - tickerPosition;\n\n    // Update the ticker position\n    setTickerPosition(tickerPosition - 1);\n\n    // If the ticker goes beyond the remaining distance, reset the ticker position\n    if (tickerPosition <= -remainingDistance) {\n      setTickerPosition(screenWidth);\n    }\n  }, [stockData, currentSector, tickerPosition, tickerWidth, itemSpacing, screenWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    style: {\n      backgroundColor: darkMode ? 'black' : 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: tickerRef,\n      className: \"ticker\",\n      style: {\n        transform: `translateX(-${tickerPosition}px)`,\n        backgroundColor: darkMode ? 'black' : 'white'\n      },\n      children: stockData.map(dataItem => {\n        if (dataItem.sector === currentSector) {\n          return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n            const value = ((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"] * 100).toFixed(2);\n            return /*#__PURE__*/_jsxDEV(Company, {\n              name: companyName,\n              value: value,\n              darkMode: darkMode\n            }, companyName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this);\n          });\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(TickerTape, \"WwktqLCWstFmRK0SMf9FC5OYpS0=\");\n_c = TickerTape;\nexport default TickerTape;\nvar _c;\n$RefreshReg$(_c, \"TickerTape\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Company","jsxDEV","_jsxDEV","TickerTape","stockData","darkMode","_s","tickerRef","tickerPosition","setTickerPosition","tickerWidth","screenWidth","window","innerWidth","itemsPerScreen","Math","floor","itemSpacing","currentSector","length","sector","currentSectorData","find","data","companiesInSector","Object","keys","totalCompanies","totalTickerWidth","remainingDistance","className","style","backgroundColor","children","ref","transform","map","dataItem","entries","companyName","companyData","value","toFixed","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\n\nfunction TickerTape({ stockData, darkMode }) {\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n\n  // Use an effect to update the ticker position when the data changes\n  useEffect(() => {\n    const currentSectorData = stockData.find((data) => data.sector === currentSector);\n    if (!currentSectorData) return;\n\n    const companiesInSector = Object.keys(currentSectorData.data);\n    const totalCompanies = companiesInSector.length;\n    const totalTickerWidth = totalCompanies * (tickerWidth + itemSpacing);\n\n    // Calculate the remaining distance based on the total ticker width and the ticker's position\n    const remainingDistance = totalTickerWidth - tickerPosition;\n\n    // Update the ticker position\n    setTickerPosition(tickerPosition - 1);\n\n    // If the ticker goes beyond the remaining distance, reset the ticker position\n    if (tickerPosition <= -remainingDistance) {\n      setTickerPosition(screenWidth);\n    }\n  }, [stockData, currentSector, tickerPosition, tickerWidth, itemSpacing, screenWidth]);\n\n  return (\n    <div className=\"ticker-container\" style={{ backgroundColor: darkMode ? 'black' : 'white' }}>\n      <div\n        ref={tickerRef}\n        className=\"ticker\"\n        style={{\n          transform: `translateX(-${tickerPosition}px)`,\n          backgroundColor: darkMode ? 'black' : 'white',\n        }}\n      >\n        {stockData.map((dataItem) => {\n          if (dataItem.sector === currentSector) {\n            return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n              const value = (((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"]) * 100).toFixed(2);\n\n              return (\n                <Company key={companyName} name={companyName} value={value} darkMode={darkMode} />\n              );\n            });\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default TickerTape;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}