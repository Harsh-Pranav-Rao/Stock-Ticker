{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TickerTape({\n  stockData,\n  darkMode\n}) {\n  _s();\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n    setTickerPosition(screenWidth);\n    const updateTickerPosition = () => {\n      setTickerPosition(prevPosition => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing) ? screenWidth : newPosition;\n      });\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n    updateTickerPosition();\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    style: {\n      backgroundColor: darkMode ? 'black' : 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: tickerRef,\n      className: \"ticker\",\n      style: {\n        transform: `translateX(-${tickerPosition}px)`,\n        backgroundColor: darkMode ? 'black' : 'white'\n      },\n      children: stockData.map(dataItem => {\n        if (dataItem.sector === currentSector) {\n          const value = ((dataItem.data[\"c\"] - dataItem.data[\"o\"]) / dataItem.data[\"o\"] * 100).toFixed(2);\n          return /*#__PURE__*/_jsxDEV(Company, {\n            name: dataItem.data.name,\n            value: value,\n            darkMode: darkMode\n          }, dataItem.data.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(TickerTape, \"WwktqLCWstFmRK0SMf9FC5OYpS0=\");\n_c = TickerTape;\nexport default TickerTape;\nvar _c;\n$RefreshReg$(_c, \"TickerTape\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Company","jsxDEV","_jsxDEV","TickerTape","stockData","darkMode","_s","tickerRef","tickerPosition","setTickerPosition","tickerWidth","screenWidth","window","innerWidth","itemsPerScreen","Math","floor","itemSpacing","currentSector","length","sector","ticker","current","animationFrameId","updateTickerPosition","prevPosition","newPosition","requestAnimationFrame","cancelAnimationFrame","className","style","backgroundColor","children","ref","transform","map","dataItem","value","data","toFixed","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\n\nfunction TickerTape({ stockData, darkMode }) {\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n\n    setTickerPosition(screenWidth);\n\n    const updateTickerPosition = () => {\n      setTickerPosition((prevPosition) => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing)\n          ? screenWidth\n          : newPosition;\n      });\n\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n\n    updateTickerPosition();\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n\n  return (\n    <div className=\"ticker-container\" style={{ backgroundColor: darkMode ? 'black' : 'white' }}>\n      <div\n        ref={tickerRef}\n        className=\"ticker\"\n        style={{\n          transform: `translateX(-${tickerPosition}px)`,\n          backgroundColor: darkMode ? 'black' : 'white',\n        }}\n      >\n        {stockData.map((dataItem) => {\n          if (dataItem.sector === currentSector) {\n            const value = (((dataItem.data[\"c\"] - dataItem.data[\"o\"]) / dataItem.data[\"o\"]) * 100).toFixed(2);\n\n            return (\n              <Company key={dataItem.data.name} name={dataItem.data.name} value={value} darkMode={darkMode} />\n            );\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default TickerTape;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}