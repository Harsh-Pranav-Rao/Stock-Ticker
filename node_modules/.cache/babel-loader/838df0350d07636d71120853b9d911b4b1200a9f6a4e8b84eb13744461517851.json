{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TickerTape from './components/tickerTape/TickerTape';\nimport './App.css';\nimport sectors from './sectorData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [stockDataKeys, setStockDataKeys] = useState([]);\n  const [currentSector, setCurrentSector] = useState(\"\"); // State to store the current sector\n  const [isLoading, setIsLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Define a function to fetch data\n  const fetchData = () => {\n    fetch(`/api`).then(response => response.json()).then(data => {\n      const {\n        sector,\n        data: sectorData\n      } = data; // Extract sector name and data\n      let dkey = Object.keys(sectorData);\n\n      // Update the current sector\n      setCurrentSector(sector);\n\n      // Store and append the data\n      setStockData(prevData => ({\n        ...prevData,\n        ...sectorData\n      }));\n      setStockDataKeys(dkey);\n      setIsLoading(false);\n    });\n  };\n\n  // Use a timer to fetch data every 60 seconds\n  useEffect(() => {\n    // Initial data fetch\n    fetchData();\n    const interval = setInterval(fetchData, 60000); // Fetch data every minute\n\n    return () => clearInterval(interval); // Clean up interval\n  }, []);\n  const bodyStyle = {\n    backgroundColor: darkMode ? 'black' : 'white'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: bodyStyle,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          borderColor: darkMode ? 'white' : 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sectorName\",\n        children: currentSector\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(TickerTape, {\n        className: \"tickerTape\",\n        stockDataKeys: stockDataKeys,\n        stockData: stockData,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          borderColor: darkMode ? 'white' : 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"DMbutton\",\n        onClick: () => {\n          setDarkMode(prev => !prev);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"material-icons\",\n          children: [darkMode ? 'wb_sunny' : 'brightness_3', ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"l+Ht6fwMW6Cbx5wHRflMQss9Mj8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TickerTape","sectors","jsxDEV","_jsxDEV","App","_s","stockData","setStockData","stockDataKeys","setStockDataKeys","currentSector","setCurrentSector","isLoading","setIsLoading","darkMode","setDarkMode","fetchData","fetch","then","response","json","data","sector","sectorData","dkey","Object","keys","prevData","interval","setInterval","clearInterval","bodyStyle","backgroundColor","style","children","className","fileName","_jsxFileName","lineNumber","columnNumber","borderColor","onClick","prev","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TickerTape from './components/tickerTape/TickerTape';\nimport './App.css';\nimport sectors from './sectorData';\n\nfunction App() {\n  const [stockData, setStockData] = useState([]);\n  const [stockDataKeys, setStockDataKeys] = useState([]);\n  const [currentSector, setCurrentSector] = useState(\"\"); // State to store the current sector\n  const [isLoading, setIsLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Define a function to fetch data\n  const fetchData = () => {\n    fetch(`/api`)\n      .then((response) => response.json())\n      .then((data) => {\n        const { sector, data: sectorData } = data; // Extract sector name and data\n        let dkey = Object.keys(sectorData);\n\n        // Update the current sector\n        setCurrentSector(sector);\n\n        // Store and append the data\n        setStockData((prevData) => ({\n          ...prevData,\n          ...sectorData,\n        }));\n        setStockDataKeys(dkey);\n        setIsLoading(false);\n      });\n  };\n\n  // Use a timer to fetch data every 60 seconds\n  useEffect(() => {\n    // Initial data fetch\n    fetchData();\n\n    const interval = setInterval(fetchData, 60000); // Fetch data every minute\n\n    return () => clearInterval(interval); // Clean up interval\n  }, []);\n\n  const bodyStyle = {\n    backgroundColor: darkMode ? 'black' : 'white',\n  };\n\n  return (\n    <div style={bodyStyle}>\n      {isLoading ? (\n        <div className=\"loader\"></div>\n      ) : (\n        <div className=\"app-container\">\n          <hr style={{ borderColor: darkMode ? 'white' : 'black' }} />\n          <div className=\"sectorName\">{currentSector}</div> {/* Display the current sector name */}\n          <TickerTape\n            className=\"tickerTape\"\n            stockDataKeys={stockDataKeys}\n            stockData={stockData}\n            darkMode={darkMode}\n          />\n          <hr style={{ borderColor: darkMode ? 'white' : 'black' }} />\n          <button\n            className=\"DMbutton\"\n            onClick={() => {\n              setDarkMode((prev) => !prev);\n            }}\n          >\n            <i className=\"material-icons\">\n              {darkMode ? 'wb_sunny' : 'brightness_3'}{' '}\n            </i>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}