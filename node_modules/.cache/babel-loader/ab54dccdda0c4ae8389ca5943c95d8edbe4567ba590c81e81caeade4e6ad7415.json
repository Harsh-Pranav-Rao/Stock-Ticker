{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TickerTape({\n  stockData,\n  darkMode,\n  fetchNewData\n}) {\n  _s();\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n  const currentSectorData = stockData.find(data => data.sector === currentSector);\n  const currentSectorCompanies = currentSectorData ? Object.keys(currentSectorData.data) : [];\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n    setTickerPosition(screenWidth);\n    const updateTickerPosition = () => {\n      setTickerPosition(prevPosition => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing) ? screenWidth : newPosition;\n      });\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n    updateTickerPosition();\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n  useEffect(() => {\n    // Check if all companies have been displayed\n    if (currentSectorCompanies.length > 0 && tickerPosition <= -(tickerWidth + itemSpacing)) {\n      fetchNewData(); // Fetch new data only when all companies have been displayed\n    }\n  }, [tickerPosition, currentSectorCompanies, fetchNewData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    style: {\n      backgroundColor: darkMode ? 'black' : 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: tickerRef,\n      className: \"ticker\",\n      style: {\n        transform: `translateX(-${tickerPosition}px)`,\n        backgroundColor: darkMode ? 'black' : 'white'\n      },\n      children: currentSectorCompanies.map(companyName => {\n        const companyData = currentSectorData.data[companyName];\n        const value = ((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"] * 100).toFixed(2);\n        return /*#__PURE__*/_jsxDEV(Company, {\n          name: companyName,\n          value: value,\n          darkMode: darkMode\n        }, companyName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(TickerTape, \"t8qBGdgZ4NujLmVM80YcxdBulgA=\");\n_c = TickerTape;\nexport default TickerTape;\nvar _c;\n$RefreshReg$(_c, \"TickerTape\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Company","jsxDEV","_jsxDEV","TickerTape","stockData","darkMode","fetchNewData","_s","tickerRef","tickerPosition","setTickerPosition","tickerWidth","screenWidth","window","innerWidth","itemsPerScreen","Math","floor","itemSpacing","currentSector","length","sector","currentSectorData","find","data","currentSectorCompanies","Object","keys","ticker","current","animationFrameId","updateTickerPosition","prevPosition","newPosition","requestAnimationFrame","cancelAnimationFrame","className","style","backgroundColor","children","ref","transform","map","companyName","companyData","value","toFixed","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\n\nfunction TickerTape({ stockData, darkMode, fetchNewData }) {\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const screenWidth = window.innerWidth;\n  const itemsPerScreen = Math.floor(screenWidth / tickerWidth);\n  const itemSpacing = 10; // Adjust the spacing between items\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n  const currentSectorData = stockData.find((data) => data.sector === currentSector);\n  const currentSectorCompanies = currentSectorData ? Object.keys(currentSectorData.data) : [];\n\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    let animationFrameId;\n\n    setTickerPosition(screenWidth);\n\n    const updateTickerPosition = () => {\n      setTickerPosition((prevPosition) => {\n        const newPosition = prevPosition - 1;\n        return newPosition <= -(tickerWidth + itemSpacing) ? screenWidth : newPosition;\n      });\n\n      animationFrameId = requestAnimationFrame(updateTickerPosition);\n    };\n\n    updateTickerPosition();\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [screenWidth]);\n\n  useEffect(() => {\n    // Check if all companies have been displayed\n    if (currentSectorCompanies.length > 0 && tickerPosition <= -(tickerWidth + itemSpacing)) {\n      fetchNewData(); // Fetch new data only when all companies have been displayed\n    }\n  }, [tickerPosition, currentSectorCompanies, fetchNewData]);\n\n  return (\n    <div className=\"ticker-container\" style={{ backgroundColor: darkMode ? 'black' : 'white' }}>\n      <div\n        ref={tickerRef}\n        className=\"ticker\"\n        style={{\n          transform: `translateX(-${tickerPosition}px)`,\n          backgroundColor: darkMode ? 'black' : 'white',\n        }}\n      >\n        {currentSectorCompanies.map((companyName) => {\n          const companyData = currentSectorData.data[companyName];\n          const value = (((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"]) * 100).toFixed(2);\n\n          return (\n            <Company key={companyName} name={companyName} value={value} darkMode={darkMode} />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default TickerTape;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}