{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TickerTape from './components/tickerTape/TickerTape';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [currentSector, setCurrentSector] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Track the count of displayed companies\n  const [displayedCompanyCount, setDisplayedCompanyCount] = useState(0);\n  const fetchData = () => {\n    fetch('/api').then(response => response.json()).then(data => {\n      const {\n        sector,\n        data: sectorData\n      } = data;\n\n      // Update stockData to include sector data\n      setStockData(prevData => [...prevData, {\n        sector,\n        data: sectorData\n      }]);\n      setCurrentSector(sector);\n      setIsLoading(false);\n    });\n  };\n\n  // Function to reset the displayed company count\n  const resetDisplayedCompanyCount = () => {\n    setDisplayedCompanyCount(0);\n  };\n  useEffect(() => {\n    fetchData();\n  }, []); // Fetch data when the component mounts\n\n  useEffect(() => {\n    // Check if all companies in the current sector have been displayed\n    if (displayedCompanyCount === stockData.length) {\n      // If all companies have been displayed, initiate a new fetch\n      resetDisplayedCompanyCount();\n      fetchData();\n    }\n  }, [displayedCompanyCount, stockData]); // Watch for changes in displayedCompanyCount and stockData\n\n  const bodyStyle = {\n    backgroundColor: darkMode ? 'black' : 'white'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: bodyStyle,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          borderColor: darkMode ? 'white' : 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sectorName\",\n        children: currentSector\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TickerTape, {\n        className: \"tickerTape\",\n        stockData: stockData,\n        darkMode: darkMode,\n        onCompanyDisplayed: () => setDisplayedCompanyCount(displayedCompanyCount + 1) // Track displayed companies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          borderColor: darkMode ? 'white' : 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"DMbutton\",\n        onClick: () => {\n          setDarkMode(prev => !prev);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"material-icons\",\n          children: darkMode ? 'wb_sunny' : 'brightness_3'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rfp0Rwq9UozvL4Y5e7O+YzIgOKI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TickerTape","jsxDEV","_jsxDEV","App","_s","stockData","setStockData","currentSector","setCurrentSector","isLoading","setIsLoading","darkMode","setDarkMode","displayedCompanyCount","setDisplayedCompanyCount","fetchData","fetch","then","response","json","data","sector","sectorData","prevData","resetDisplayedCompanyCount","length","bodyStyle","backgroundColor","style","children","className","fileName","_jsxFileName","lineNumber","columnNumber","borderColor","onCompanyDisplayed","onClick","prev","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TickerTape from './components/tickerTape/TickerTape';\nimport './App.css';\n\nfunction App() {\n  const [stockData, setStockData] = useState([]);\n  const [currentSector, setCurrentSector] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Track the count of displayed companies\n  const [displayedCompanyCount, setDisplayedCompanyCount] = useState(0);\n\n  const fetchData = () => {\n    fetch('/api')\n      .then((response) => response.json())\n      .then((data) => {\n        const { sector, data: sectorData } = data;\n\n        // Update stockData to include sector data\n        setStockData((prevData) => [\n          ...prevData,\n          { sector, data: sectorData },\n        ]);\n\n        setCurrentSector(sector);\n        setIsLoading(false);\n      });\n  };\n\n  // Function to reset the displayed company count\n  const resetDisplayedCompanyCount = () => {\n    setDisplayedCompanyCount(0);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []); // Fetch data when the component mounts\n\n  useEffect(() => {\n    // Check if all companies in the current sector have been displayed\n    if (displayedCompanyCount === stockData.length) {\n      // If all companies have been displayed, initiate a new fetch\n      resetDisplayedCompanyCount();\n      fetchData();\n    }\n  }, [displayedCompanyCount, stockData]); // Watch for changes in displayedCompanyCount and stockData\n\n  const bodyStyle = {\n    backgroundColor: darkMode ? 'black' : 'white',\n  };\n\n  return (\n    <div style={bodyStyle}>\n      {isLoading ? (\n        <div className=\"loader\"></div>\n      ) : (\n        <div className=\"app-container\">\n          <hr style={{ borderColor: darkMode ? 'white' : 'black' }} />\n          <div className=\"sectorName\">{currentSector}</div>\n          <TickerTape\n            className=\"tickerTape\"\n            stockData={stockData}\n            darkMode={darkMode}\n            onCompanyDisplayed={() => setDisplayedCompanyCount(displayedCompanyCount + 1)} // Track displayed companies\n          />\n\n          <hr style={{ borderColor: darkMode ? 'white' : 'black' }} />\n          <button\n            className=\"DMbutton\"\n            onClick={() => {\n              setDarkMode((prev) => !prev);\n            }}\n          >\n            <i className=\"material-icons\">\n              {darkMode ? 'wb_sunny' : 'brightness_3'}\n            </i>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}