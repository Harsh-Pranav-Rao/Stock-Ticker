{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TickerTape({\n  stockData,\n  darkMode\n}) {\n  _s();\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const itemSpacing = 10; // Adjust the spacing between items\n  const animationSpeed = 30; // Adjust this for animation speed (higher value is faster)\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n\n  // Use an effect to update the ticker position when the data changes\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    const companies = getVisibleCompanies(stockData, currentSector);\n    const totalWidth = (tickerWidth + itemSpacing) * companies.length;\n    const updateTickerPosition = () => {\n      setTickerPosition(prevPosition => {\n        const newPosition = prevPosition - 1;\n        if (newPosition <= -totalWidth) {\n          return 0; // Reset to the beginning\n        }\n\n        return newPosition;\n      });\n    };\n    const interval = 1000 / animationSpeed; // Update position based on animation speed\n    const timer = setInterval(updateTickerPosition, interval);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [stockData, currentSector, tickerWidth, itemSpacing]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticker-container\",\n    style: {\n      backgroundColor: darkMode ? 'black' : 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: tickerRef,\n      className: \"ticker\",\n      style: {\n        transform: `translateX(-${tickerPosition}px)`,\n        backgroundColor: darkMode ? 'black' : 'white'\n      },\n      children: stockData.map(dataItem => {\n        if (dataItem.sector === currentSector) {\n          return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n            const value = ((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"] * 100).toFixed(2);\n            return /*#__PURE__*/_jsxDEV(Company, {\n              name: companyName,\n              value: value,\n              darkMode: darkMode\n            }, companyName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this);\n          });\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(TickerTape, \"WwktqLCWstFmRK0SMf9FC5OYpS0=\");\n_c = TickerTape;\nfunction getVisibleCompanies(stockData, currentSector) {\n  return stockData.reduce((visibleCompanies, dataItem) => {\n    if (dataItem.sector === currentSector) {\n      return visibleCompanies.concat(Object.keys(dataItem.data));\n    }\n    return visibleCompanies;\n  }, []);\n}\nexport default TickerTape;\nvar _c;\n$RefreshReg$(_c, \"TickerTape\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Company","jsxDEV","_jsxDEV","TickerTape","stockData","darkMode","_s","tickerRef","tickerPosition","setTickerPosition","tickerWidth","itemSpacing","animationSpeed","currentSector","length","sector","ticker","current","companies","getVisibleCompanies","totalWidth","updateTickerPosition","prevPosition","newPosition","interval","timer","setInterval","clearInterval","className","style","backgroundColor","children","ref","transform","map","dataItem","Object","entries","data","companyName","companyData","value","toFixed","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","reduce","visibleCompanies","concat","keys","$RefreshReg$"],"sources":["/Users/pranav/Desktop/Stock Ticker 0/frontend/my-app/src/components/tickerTape/TickerTape.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Company from '../company/Company';\nimport './TickerTape.css';\n\nfunction TickerTape({ stockData, darkMode }) {\n  const tickerRef = useRef(null);\n  const [tickerPosition, setTickerPosition] = useState(0);\n  const tickerWidth = 100; // Adjust this to the width of your ticker item\n  const itemSpacing = 10; // Adjust the spacing between items\n  const animationSpeed = 30; // Adjust this for animation speed (higher value is faster)\n\n  // Define currentSector using the stockData parameter\n  const currentSector = stockData.length > 0 ? stockData[stockData.length - 1].sector : '';\n\n  // Use an effect to update the ticker position when the data changes\n  useEffect(() => {\n    const ticker = tickerRef.current;\n    const companies = getVisibleCompanies(stockData, currentSector);\n    const totalWidth = (tickerWidth + itemSpacing) * companies.length;\n\n    const updateTickerPosition = () => {\n      setTickerPosition((prevPosition) => {\n        const newPosition = prevPosition - 1;\n        if (newPosition <= -(totalWidth)) {\n          return 0; // Reset to the beginning\n        }\n        return newPosition;\n      });\n    };\n\n    const interval = 1000 / animationSpeed; // Update position based on animation speed\n    const timer = setInterval(updateTickerPosition, interval);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [stockData, currentSector, tickerWidth, itemSpacing]);\n\n  return (\n    <div className=\"ticker-container\" style={{ backgroundColor: darkMode ? 'black' : 'white' }}>\n      <div\n        ref={tickerRef}\n        className=\"ticker\"\n        style={{\n          transform: `translateX(-${tickerPosition}px)`,\n          backgroundColor: darkMode ? 'black' : 'white',\n        }}\n      >\n        {stockData.map((dataItem) => {\n          if (dataItem.sector === currentSector) {\n            return Object.entries(dataItem.data).map(([companyName, companyData]) => {\n              const value = (((companyData[\"c\"] - companyData[\"o\"]) / companyData[\"o\"]) * 100).toFixed(2);\n\n              return (\n                <Company key={companyName} name={companyName} value={value} darkMode={darkMode} />\n              );\n            });\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction getVisibleCompanies(stockData, currentSector) {\n  return stockData.reduce((visibleCompanies, dataItem) => {\n    if (dataItem.sector === currentSector) {\n      return visibleCompanies.concat(Object.keys(dataItem.data));\n    }\n    return visibleCompanies;\n  }, []);\n}\n\nexport default TickerTape;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}